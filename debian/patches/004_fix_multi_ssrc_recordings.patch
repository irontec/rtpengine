diff --git a/recording-daemon/Makefile b/recording-daemon/Makefile
index 200636eb..bd4bb999 100644
--- a/recording-daemon/Makefile
+++ b/recording-daemon/Makefile
@@ -1,6 +1,6 @@
 TARGET=		rtpengine-recording
 
-CFLAGS=		-g -Wall -pthread -I. -I../lib/
+CFLAGS=		-g -Wall -pthread -I. -I../lib/ -I../daemon/
 CFLAGS+=	-std=c99
 CFLAGS+=	-D_GNU_SOURCE -D_POSIX_SOURCE -D_POSIX_C_SOURCE
 CFLAGS+=	$(shell pkg-config --cflags glib-2.0)
diff --git a/recording-daemon/decoder.c b/recording-daemon/decoder.c
index 603683fe..568f5307 100644
--- a/recording-daemon/decoder.c
+++ b/recording-daemon/decoder.c
@@ -73,9 +73,11 @@ decoder_t *decoder_new(const char *payload_str, output_t *outp) {
 }
 
 
-static int decoder_got_frame(decoder_t *dec, AVFrame *frame, void *op, void *mp) {
-	metafile_t *metafile = mp;
-	output_t *output = op;
+static int decoder_got_frame(decoder_t *dec, AVFrame *frame, void *sp, void *dp) {
+    ssrc_t *ssrc = sp;
+    metafile_t *metafile = ssrc->metafile;
+    output_t *output = ssrc->output;
+    stream_t *stream = ssrc->stream;
 
 	dbg("got frame pts %llu samples %u contents %02x%02x%02x%02x...", (unsigned long long) frame->pts, frame->nb_samples,
 			(unsigned int) frame->extended_data[0][0],
@@ -86,8 +88,9 @@ static int decoder_got_frame(decoder_t *dec, AVFrame *frame, void *op, void *mp)
 	// handle mix output
 	pthread_mutex_lock(&metafile->mix_lock);
 	if (metafile->mix_out) {
+		dbg("adding packet from stream #%lu to mix output", stream->id);
 		if (G_UNLIKELY(dec->mixer_idx == (unsigned int) -1))
-			dec->mixer_idx = mix_get_index(metafile->mix);
+			dec->mixer_idx = mix_get_index(metafile->mix, ssrc);
 		format_t actual_format;
 		if (output_config(metafile->mix_out, &dec->out_format, &actual_format))
 			goto no_mix_out;
@@ -98,7 +101,7 @@ static int decoder_got_frame(decoder_t *dec, AVFrame *frame, void *op, void *mp)
 			pthread_mutex_unlock(&metafile->mix_lock);
 			goto err;
 		}
-		if (mix_add(metafile->mix, dec_frame, dec->mixer_idx, metafile->mix_out))
+		if (mix_add(metafile->mix, dec_frame, dec->mixer_idx, ssrc, metafile->mix_out))
 			ilog(LOG_ERR, "Failed to add decoded packet to mixed output");
 	}
 no_mix_out:
@@ -120,6 +123,6 @@ err:
 }
 
 
-int decoder_input(decoder_t *dec, const str *data, unsigned long ts, output_t *output, metafile_t *metafile) {
-	return decoder_input_data(dec, data, ts, decoder_got_frame, output, metafile);
+int decoder_input(decoder_t *dec, const str *data, unsigned long ts, ssrc_t *ssrc) {
+	return decoder_input_data(dec, data, ts, decoder_got_frame, ssrc, dec);
 }
diff --git a/recording-daemon/decoder.h b/recording-daemon/decoder.h
index 7f2ba6da..10ad0dab 100644
--- a/recording-daemon/decoder.h
+++ b/recording-daemon/decoder.h
@@ -9,7 +9,7 @@ extern int resample_audio;
 
 
 decoder_t *decoder_new(const char *payload_str, output_t *);
-int decoder_input(decoder_t *, const str *, unsigned long ts, output_t *, metafile_t *);
+int decoder_input(decoder_t *, const str *, unsigned long ts, ssrc_t *ssrc);
 
 
 #endif
diff --git a/recording-daemon/mix.c b/recording-daemon/mix.c
index 58677cac..e258d39a 100644
--- a/recording-daemon/mix.c
+++ b/recording-daemon/mix.c
@@ -7,6 +7,8 @@
 #include <libavutil/mathematics.h>
 #include <inttypes.h>
 #include <libavutil/opt.h>
+#include <sys/time.h>
+#include "aux.h"
 #include "types.h"
 #include "log.h"
 #include "output.h"
@@ -23,6 +25,8 @@ struct mix_s {
 	AVFilterContext *src_ctxs[NUM_INPUTS];
 	uint64_t pts_offs[NUM_INPUTS]; // initialized at first input seen
 	uint64_t in_pts[NUM_INPUTS]; // running counter of next expected adjusted pts
+	struct timeval last_use[NUM_INPUTS]; // to recycle old mix inputs
+	void *input_ref[NUM_INPUTS]; // to avoid collisions in case of idx re-use
 	AVFilterContext *amix_ctx;
 	AVFilterContext *sink_ctx;
 	unsigned int next_idx;
@@ -45,7 +49,7 @@ static void mix_shutdown(mix_t *mix) {
 		avfilter_free(mix->sink_ctx);
 	mix->sink_ctx = NULL;
 
-	for (int i = 0; i < NUM_INPUTS; i++) {
+	for (unsigned int i = 0; i < NUM_INPUTS; i++) {
 		if (mix->src_ctxs[i])
 			avfilter_free(mix->src_ctxs[i]);
 		mix->src_ctxs[i] = NULL;
@@ -68,8 +72,35 @@ void mix_destroy(mix_t *mix) {
 }
 
 
-unsigned int mix_get_index(mix_t *mix) {
-	return mix->next_idx++;
+static void mix_input_reset(mix_t *mix, unsigned int idx) {
+	mix->pts_offs[idx] = (uint64_t) -1LL;
+	ZERO(mix->last_use[idx]);
+	mix->input_ref[idx] = NULL;
+}
+
+
+unsigned int mix_get_index(mix_t *mix, void *ptr) {
+	unsigned int next = mix->next_idx++;
+	if (next < NUM_INPUTS) {
+		// must be unused
+		mix->input_ref[next] = ptr;
+		return next;
+	}
+
+	// too many inputs - find one to re-use
+	struct timeval earliest = {0,};
+	next = 0;
+	for (unsigned int i = 0; i < NUM_INPUTS; i++) {
+		if (earliest.tv_sec == 0 || timeval_cmp(&earliest, &mix->last_use[i]) > 0) {
+			next = i;
+			earliest = mix->last_use[i];
+		}
+	}
+
+	ilog(LOG_DEBUG, "Re-using mix input index $%u", next);
+	mix_input_reset(mix, next);
+	mix->input_ref[next] = ptr;
+	return next;
 }
 
 
@@ -107,7 +138,7 @@ int mix_config(mix_t *mix, const format_t *format) {
 	if (!flt)
 		goto err;
 
-	for (int i = 0; i < NUM_INPUTS; i++) {
+	for (unsigned int i = 0; i < NUM_INPUTS; i++) {
 		dbg("init input ctx %i", i);
 
 		snprintf(args, sizeof(args), "time_base=%d/%d:sample_rate=%d:sample_fmt=%s:"
@@ -158,7 +189,7 @@ mix_t *mix_new() {
 	format_init(&mix->format);
 	mix->sink_frame = av_frame_alloc();
 
-	for (int i = 0; i < NUM_INPUTS; i++)
+	for (unsigned int i = 0; i < NUM_INPUTS; i++)
 		mix->pts_offs[i] = (uint64_t) -1LL;
 
 	return mix;
@@ -209,8 +240,8 @@ static void mix_silence_fill(mix_t *mix) {
 	if (mix->out_pts < mix->format.clockrate)
 		return;
 
-	for (int i = 0; i < NUM_INPUTS; i++) {
-		// check the pts of each input and give them max 1 second of delay.
+	for (unsigned int i = 0; i < NUM_INPUTS; i++) {
+		// check the pts of each input and give them max 0.5 second of delay.
 		// if they fall behind too much, fill input with silence. otherwise
 		// output stalls and won't produce media
 		mix_silence_fill_idx_upto(mix, i, mix->out_pts - mix->format.clockrate);
@@ -218,7 +249,7 @@ static void mix_silence_fill(mix_t *mix) {
 }
 
 
-int mix_add(mix_t *mix, AVFrame *frame, unsigned int idx, output_t *output) {
+int mix_add(mix_t *mix, AVFrame *frame, unsigned int idx, void *ptr, output_t *output) {
 	const char *err;
 
 	err = "index out of range";
@@ -229,6 +260,12 @@ int mix_add(mix_t *mix, AVFrame *frame, unsigned int idx, output_t *output) {
 	if (!mix->src_ctxs[idx])
 		goto err;
 
+	err = "received samples for old re-used input channel";
+	if (ptr != mix->input_ref[idx])
+		goto err;
+
+	gettimeofday(&mix->last_use[idx], NULL);
+
 	dbg("stream %i pts_off %llu in pts %llu in frame pts %llu samples %u mix out pts %llu", 
 			idx,
 			(unsigned long long) mix->pts_offs[idx],
diff --git a/recording-daemon/mix.h b/recording-daemon/mix.h
index 10456130..98effbb4 100644
--- a/recording-daemon/mix.h
+++ b/recording-daemon/mix.h
@@ -9,8 +9,8 @@ mix_t *mix_new(void);
 void mix_destroy(mix_t *mix);
 
 int mix_config(mix_t *, const format_t *format);
-int mix_add(mix_t *mix, AVFrame *frame, unsigned int idx, output_t *output);
-unsigned int mix_get_index(mix_t *);
+int mix_add(mix_t *mix, AVFrame *frame, unsigned int idx, void *, output_t *output);
+unsigned int mix_get_index(mix_t *, void *);
 
 
 #endif
diff --git a/recording-daemon/packet.c b/recording-daemon/packet.c
index 5c9baed3..c0a9a96c 100644
--- a/recording-daemon/packet.c
+++ b/recording-daemon/packet.c
@@ -101,7 +101,7 @@ static void packet_decode(ssrc_t *ssrc, packet_t *packet) {
 	}
 
 	if (decoder_input(ssrc->decoders[payload_type], &packet->payload, ntohl(packet->rtp->timestamp),
-			ssrc->output, ssrc->metafile))
+			ssrc))
 		ilog(LOG_ERR, "Failed to decode media packet");
 }
 
